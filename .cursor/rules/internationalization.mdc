---
description: 
globs: 
alwaysApply: false
---
# 国际化 (i18n) 实施规范

## 📋 实施要求
- 默认语言: 英文 (en)
- 支持语言: 英文 (en)、中文 (zh)
- 所有用户可见文本必须支持国际化
- 使用 next-intl 库实现国际化功能

## 📁 文件结构
```
src/
├── locales/
│   ├── en.json          # 英文翻译
│   ├── zh.json          # 中文翻译
│   └── index.ts         # 导出所有语言包
├── components/
│   └── ui/
│       └── language-switcher.tsx  # 语言切换组件
└── lib/
    └── i18n.ts          # 国际化配置
```

## 🔧 实施步骤

### 1. 安装依赖
```bash
npm install next-intl
```

### 2. 创建语言包文件
- 英文: `src/locales/en.json`
- 中文: `src/locales/zh.json`

### 3. 组件使用规范
```typescript
import { useTranslations } from 'next-intl';

export function Component() {
  const t = useTranslations('namespace');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
    </div>
  );
}
```

### 4. 语言切换组件
- 位置: [src/components/ui/language-switcher.tsx](mdc:src/components/ui/language-switcher.tsx)
- 功能: 在英文和中文之间切换
- 样式: 使用 Tailwind CSS，与整体设计保持一致

## 📝 翻译键命名规范
- 使用嵌套结构组织翻译键
- 键名使用 camelCase
- 按功能模块分组

示例结构:
```json
{
  "common": {
    "submit": "Submit",
    "cancel": "Cancel",
    "loading": "Loading..."
  },
  "hero": {
    "title": "Transform Your Photos",
    "subtitle": "AI-powered photo stylization platform"
  },
  "features": {
    "title": "Powerful Features",
    "aiProcessing": "AI Processing"
  }
}
```

## 🎯 优先级
1. 首页所有文本
2. 导航和按钮
3. 表单和错误信息
4. 功能介绍和帮助文档

## ⚠️ 注意事项
- 图片中的文字也需要国际化处理
- 日期和数字格式要本地化
- URL路径可以考虑国际化 (/en/, /zh/)
- SEO相关的meta标签也要国际化

